// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simple.proto

#include "simple.pb.h"
#include "simple.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace petnet {
namespace simple {
namespace v1 {

static const char* SimpleRequestServer_method_names[] = {
  "/petnet.simple.v1.SimpleRequestServer/ClientSimpleSend",
  "/petnet.simple.v1.SimpleRequestServer/ClientSimpleRecv",
  "/petnet.simple.v1.SimpleRequestServer/ServerSimpleSend",
};

std::unique_ptr< SimpleRequestServer::Stub> SimpleRequestServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SimpleRequestServer::Stub> stub(new SimpleRequestServer::Stub(channel, options));
  return stub;
}

SimpleRequestServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClientSimpleSend_(SimpleRequestServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientSimpleRecv_(SimpleRequestServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerSimpleSend_(SimpleRequestServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SimpleRequestServer::Stub::ClientSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest& request, ::petnet::simple::v1::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::petnet::simple::v1::ClientSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientSimpleSend_, context, request, response);
}

void SimpleRequestServer::Stub::async::ClientSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest* request, ::petnet::simple::v1::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::petnet::simple::v1::ClientSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientSimpleSend_, context, request, response, std::move(f));
}

void SimpleRequestServer::Stub::async::ClientSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest* request, ::petnet::simple::v1::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientSimpleSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::PrepareAsyncClientSimpleSendRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::petnet::simple::v1::Response, ::petnet::simple::v1::ClientSimpleSendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientSimpleSend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::AsyncClientSimpleSendRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientSimpleSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleRequestServer::Stub::ClientSimpleRecv(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest& request, ::petnet::simple::v1::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::petnet::simple::v1::ClientSimpleRecvRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientSimpleRecv_, context, request, response);
}

void SimpleRequestServer::Stub::async::ClientSimpleRecv(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest* request, ::petnet::simple::v1::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::petnet::simple::v1::ClientSimpleRecvRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientSimpleRecv_, context, request, response, std::move(f));
}

void SimpleRequestServer::Stub::async::ClientSimpleRecv(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest* request, ::petnet::simple::v1::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientSimpleRecv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::PrepareAsyncClientSimpleRecvRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::petnet::simple::v1::Response, ::petnet::simple::v1::ClientSimpleRecvRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientSimpleRecv_, context, request);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::AsyncClientSimpleRecvRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientSimpleRecvRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SimpleRequestServer::Stub::ServerSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest& request, ::petnet::simple::v1::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::petnet::simple::v1::ServerSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ServerSimpleSend_, context, request, response);
}

void SimpleRequestServer::Stub::async::ServerSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest* request, ::petnet::simple::v1::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::petnet::simple::v1::ServerSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerSimpleSend_, context, request, response, std::move(f));
}

void SimpleRequestServer::Stub::async::ServerSimpleSend(::grpc::ClientContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest* request, ::petnet::simple::v1::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ServerSimpleSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::PrepareAsyncServerSimpleSendRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::petnet::simple::v1::Response, ::petnet::simple::v1::ServerSimpleSendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ServerSimpleSend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::petnet::simple::v1::Response>* SimpleRequestServer::Stub::AsyncServerSimpleSendRaw(::grpc::ClientContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncServerSimpleSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

SimpleRequestServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleRequestServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleRequestServer::Service, ::petnet::simple::v1::ClientSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleRequestServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::petnet::simple::v1::ClientSimpleSendRequest* req,
             ::petnet::simple::v1::Response* resp) {
               return service->ClientSimpleSend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleRequestServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleRequestServer::Service, ::petnet::simple::v1::ClientSimpleRecvRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleRequestServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::petnet::simple::v1::ClientSimpleRecvRequest* req,
             ::petnet::simple::v1::Response* resp) {
               return service->ClientSimpleRecv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SimpleRequestServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SimpleRequestServer::Service, ::petnet::simple::v1::ServerSimpleSendRequest, ::petnet::simple::v1::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SimpleRequestServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::petnet::simple::v1::ServerSimpleSendRequest* req,
             ::petnet::simple::v1::Response* resp) {
               return service->ServerSimpleSend(ctx, req, resp);
             }, this)));
}

SimpleRequestServer::Service::~Service() {
}

::grpc::Status SimpleRequestServer::Service::ClientSimpleSend(::grpc::ServerContext* context, const ::petnet::simple::v1::ClientSimpleSendRequest* request, ::petnet::simple::v1::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleRequestServer::Service::ClientSimpleRecv(::grpc::ServerContext* context, const ::petnet::simple::v1::ClientSimpleRecvRequest* request, ::petnet::simple::v1::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SimpleRequestServer::Service::ServerSimpleSend(::grpc::ServerContext* context, const ::petnet::simple::v1::ServerSimpleSendRequest* request, ::petnet::simple::v1::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace petnet
}  // namespace simple
}  // namespace v1

